{"version":3,"sources":["components/Filter/Filter.module.css","components/App.module.css","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/redux/action.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","components/redux/store.js","index.js"],"names":["module","exports","addContact","createAction","deleteContact","addFilter","ContactForm","state","name","number","handleChange","target","value","setState","handleSubmit","e","preventDefault","acc","props","contacts","forEach","el","toLocaleLowerCase","alert","reset","this","onSubmit","className","styles","contactForm","type","pattern","title","required","onChange","React","Component","mapDispatchToProps","connect","normalizedFilter","filter","toLowerCase","contact","includes","getFilteredContacts","contactList","map","id","onClick","filter__header","filter__input","App","headers","dispatch","contactsReducer","createReducer","actions","action","randId","payload","filterReducer","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64b98894.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1eqeE\",\"filter__header\":\"Filter_filter__header__3nqCp\",\"filter__input\":\"Filter_filter__input__25BJS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headers\":\"App_headers__2DxA8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__CnZK5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2Dcx-\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\n// export const addContact = payload => ({\r\n//   type: \"addContact\",\r\n//   payload\r\n// });\r\n// export const deleteContact = payload => ({\r\n//   type: \"deleteContact\",\r\n//   payload\r\n// });\r\n// export const addFilter = payload => ({\r\n//   type: \"addFilter\",\r\n//   payload\r\n// });\r\n\r\nexport const addContact = createAction(\"addContact\");\r\nexport const deleteContact = createAction(\"deleteContact\");\r\nexport const addFilter = createAction(\"addFilter\");\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactForm.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { addContact } from \"../redux/action\";\r\n\r\nclass ContactForm extends React.Component {\r\n  static propTypes = {\r\n    addFunc: PropTypes.func.isRequired\r\n  };\r\n\r\n  state = {\r\n    name: \"\",\r\n    number: \"\"\r\n  };\r\n\r\n  handleChange = ({ target: { name, value } }) => {\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    let acc = false;\r\n\r\n    this.props.contacts.forEach(el => el.name.toLocaleLowerCase() === this.state.name.toLocaleLowerCase() && (acc = true));\r\n\r\n    acc ? alert(`${this.state.name} is already in contacts`) : this.props.addContact(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={styles.contactForm}>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\">Добавить</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { contacts: state.contacts };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  addContact\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactList.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { deleteContact } from \"../redux/action\";\r\n\r\nconst ContactList = ({ contacts, deleteContact }) => {\r\n  return (\r\n    <>\r\n      <ul className={styles.contactList}>\r\n        {contacts.map(el => (\r\n          <li key={el.id}>\r\n            {el.name}: {el.number}\r\n            <button type=\"button\" name={el.id} onClick={() => deleteContact(el.id)}>\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired\r\n    }).isRequired\r\n  ).isRequired,\r\n  deleteContact: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const getFilteredContacts = () => {\r\n    const normalizedFilter = state.filter.toLowerCase();\r\n    return state.contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\r\n  };\r\n\r\n  return { contacts: getFilteredContacts() };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  deleteContact\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Filter.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { addFilter } from \"../redux/action\";\r\n\r\nconst Filter = ({ value, addFilter }) => {\r\n  return (\r\n    <div className={styles.filter}>\r\n      <h3 className={styles.filter__header}>Find contacts by name</h3>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        value={value}\r\n        onChange={e => addFilter(e.target.value)}\r\n        className={styles.filter__input}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filterFunc: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return { value: state.filter };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  addFilter\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\r\n\r\nimport ContactForm from \"./ContactForm/ContactForm\";\r\nimport ContactList from \"./ContactList/ContactList\";\r\nimport Filter from \"./Filter/Filter\";\r\nimport styles from \"./App.module.css\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// const testInput = [\r\n//   { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n//   { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n//   { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n//   { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" }\r\n// ];\r\n\r\n// localStorage.setItem(\"contacts\", JSON.stringify(testInput));\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <h2 className={styles.headers}>Phonebook</h2>\r\n        <ContactForm />\r\n        <h2 className={styles.headers}>Contacts</h2>\r\n        <Filter />\r\n        <ContactList />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = () => {};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// import { createStore } from \"@reduxjs/toolkit\";\r\nimport { configureStore, createReducer } from \"@reduxjs/toolkit\";\r\nimport { v4 as randId } from \"uuid\";\r\nimport * as actions from \"./action\";\r\n\r\n// const initialState = {\r\n//   contacts: [],\r\n//   filter: \"\"\r\n// };\r\n\r\n// const reducer = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     case \"addContact\":\r\n//       return { ...state, contacts: [...state.contacts, { id: randId(), ...action.payload }] };\r\n\r\n//     case \"deleteContact\":\r\n//       return { ...state, contacts: state.contacts.filter(el => el.id !== action.payload) };\r\n\r\n//     case \"addFilter\":\r\n//       return { ...state, filter: action.payload };\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const store = createStore(reducer);\r\n\r\nconst contactsReducer = createReducer([], {\r\n  [actions.addContact]: (state, action) => [...state, { id: randId(), ...action.payload }],\r\n  [actions.deleteContact]: (state, action) => state.filter(el => el.id !== action.payload)\r\n});\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [actions.addFilter]: (state, action) => action.payload\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: contactsReducer, filter: filterReducer }\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./index.css\";\nimport store from \"./components/redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}